"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("./batch-create/types");
const parser_1 = require("./batch-create/parser");
const UnwindCreateVisitor_1 = require("./batch-create/unwind-create-visitors/UnwindCreateVisitor");
const CallbackBucket_1 = require("../classes/CallbackBucket");
const cypher_builder_1 = __importDefault(require("@neo4j/cypher-builder"));
const QueryASTFactory_1 = require("./queryAST/factory/QueryASTFactory");
const QueryASTContext_1 = require("./queryAST/ast/QueryASTContext");
async function unwindCreate({ context, node, }) {
    if (context.subscriptionsEnabled) {
        throw new types_1.UnsupportedUnwindOptimization("Unwind create optimization does not yet support subscriptions");
    }
    const { resolveTree } = context;
    const input = resolveTree.args.input;
    const treeDescriptor = Array.isArray(input)
        ? (0, parser_1.mergeTreeDescriptors)(input.map((el) => (0, parser_1.getTreeDescriptor)(el, node, context)))
        : (0, parser_1.getTreeDescriptor)(input, node, context);
    const createNodeAST = (0, parser_1.parseCreate)(treeDescriptor, node, context);
    const callbackBucket = new CallbackBucket_1.CallbackBucket(context);
    const unwindVar = new cypher_builder_1.default.Variable();
    const unwind = new cypher_builder_1.default.Param(input);
    const unwindQuery = new cypher_builder_1.default.Unwind([unwind, unwindVar]);
    const unwindCreateVisitor = new UnwindCreateVisitor_1.UnwindCreateVisitor(unwindVar, callbackBucket, context);
    createNodeAST.accept(unwindCreateVisitor);
    const [rootNodeVariable, createCypher] = unwindCreateVisitor.build();
    const concreteEntityAdapter = context.schemaModel.getConcreteEntityAdapter(node.name);
    if (!concreteEntityAdapter) {
        throw new Error(`Transpilation error: ${node.name} is not a concrete entity`);
    }
    const queryAST = new QueryASTFactory_1.QueryASTFactory(context.schemaModel).createQueryAST(resolveTree, concreteEntityAdapter, context);
    const queryASTEnv = new QueryASTContext_1.QueryASTEnv();
    const queryASTContext = new QueryASTContext_1.QueryASTContext({
        target: rootNodeVariable,
        env: queryASTEnv,
        neo4jGraphQLContext: context,
        returnVariable: new cypher_builder_1.default.NamedVariable("data"),
        shouldCollect: true,
    });
    const clauses = queryAST.transpile(queryASTContext).clauses;
    const projectionCypher = clauses.length
        ? cypher_builder_1.default.concat(...clauses)
        : new cypher_builder_1.default.Return(new cypher_builder_1.default.Literal("Query cannot conclude with CALL"));
    const unwindCreate = cypher_builder_1.default.concat(unwindQuery, createCypher, projectionCypher);
    const createQueryCypher = unwindCreate.build("create_");
    const { cypher, params: resolvedCallbacks } = await callbackBucket.resolveCallbacksAndFilterCypher({
        cypher: createQueryCypher.cypher,
    });
    return {
        cypher,
        params: {
            ...createQueryCypher.params,
            resolvedCallbacks,
        },
    };
}
exports.default = unwindCreate;
//# sourceMappingURL=unwind-create.js.map