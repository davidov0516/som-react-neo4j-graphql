import type { Expr } from "..";
import type { CypherEnvironment } from "../Environment";
import type { NodeRef } from "../references/NodeRef";
import { RelationshipRef } from "../references/RelationshipRef";
import type { Variable } from "../references/Variable";
import { PartialPattern } from "./PartialPattern";
import { PatternElement } from "./PatternElement";
/** Represents a pattern of a single node or n-relationships to be used in clauses.
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/syntax/patterns/)
 * @group Patterns
 */
export declare class Pattern extends PatternElement<NodeRef> {
    private withLabels;
    private withVariable;
    private previous;
    private properties;
    constructor(node: NodeRef, previous?: PartialPattern);
    withoutLabels(): this;
    withoutVariable(): this;
    withProperties(properties: Record<string, Expr>): this;
    related(rel?: RelationshipRef): PartialPattern;
    getVariables(): Variable[];
    /**
     * @internal
     */
    getCypher(env: CypherEnvironment): string;
    private getNodeLabelsString;
}
